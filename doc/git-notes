for capistrano deployment, i want to do the following:

checkout code on a build server
run tests on it automatedly
if tests pass, then deploy the checked out code on staging
so we dont want to checkout code on build, test it, and then deploy from git, as someone else might have committed something ontop, we want to deploy what is the current head in the checked out code.

we can do that if we have cloned the code on the git repo, which means the code is from git repo. so we can do something like

cat .git/refs/remotes/origin/master 
2bc78c4332bd2b76bd7f6be4c9ac732d2e19c9ba
or
git --git-dir=./.git rev-parse --verify HEAD
2bc78c4332bd2b76bd7f6be4c9ac732d2e19c9ba
or
git --git-dir=./.git rev-parse origin/master
2bc78c4332bd2b76bd7f6be4c9ac732d2e19c9ba
or
git log --pretty=format:'%H' -n 1

to get the commit id, and then do cap deploy using this id

but if we had copied the code by some sort of export on the build server, we wont have the .git repo, in this case, how can we deploy the current checked out code. it must be having an id, what is the best way to store this id and use it in an ant script that would then do a cap deploy with this id?


I had pull access only to a git repo, example git@github.com:x/x.git
I had to fork it, make changes, commit and then do a pull request
i had cloned git@github.com:x/x.git locally
i made changes, and committed
i forked, to get a url like git@github.com:umarsheikh/x.git
I did not want to clone it, and push there, so i simply did:
git remote add umar_fork git@github.com:umarsheikh/x.git
git branch # showed master
git push umar_fork master
this made my changes reflect on the git@github.com:umarsheikh/x.git
and then i could do a pull request

similarly, after getting access to the repo, if you wnat to pull to the yy branch, you can do:
git branch # yy
git merge umarfork/master




"git clone git@heroku.com:blooming-mist-6015.git -o heroku"
Instead of using the remote name origin to keep track of the upstream repository, use "heroku"

to track a remote branch:
git checkout --track -b haml origin/haml
git checkout -t remotes/origin/haml also does the same apparently!

